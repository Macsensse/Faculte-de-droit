name: Sync Agenda to Google Calendar

on:
  push:
    paths:
      - '1.Agenda.md'

jobs:
  sync-agenda:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib python-dateutil

    - name: Save Google Credentials
      run: |
        echo "$GC_CREDENTIALS" | base64 --decode > credentials.json

    - name: Run sync script
      run: |
        python3 <<'EOF'
        import re
        import datetime
        from dateutil.parser import parse
        from google.oauth2.credentials import Credentials
        from google_auth_oauthlib.flow import InstalledAppFlow
        from googleapiclient.discovery import build

        SCOPES = ['https://www.googleapis.com/auth/calendar']
        CREDENTIALS_FILE = 'credentials.json'
        TOKEN_FILE = 'token.json'

        # --- Authentification Google Calendar ---
        def get_calendar_service():
            try:
                creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
            except:
                flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
                creds = flow.run_local_server(port=0)
                with open(TOKEN_FILE, 'w') as f:
                    f.write(creds.to_json())
            return build('calendar', 'v3', credentials=creds)

        # --- Lire agenda.md ---
        def parse_agenda(file_path='1.Agenda.md'):
            events = []
            pattern = r'(\d{4}-\d{2}-\d{2})\s*-\s*(.*)'
            with open(file_path, 'r') as f:
                for line in f:
                    match = re.match(pattern, line)
                    if match:
                        date_str, title = match.groups()
                        events.append((parse(date_str), title))
            return events

        # --- Ajouter les événements ---
        def add_events(events):
            service = get_calendar_service()
            for date, title in events:
                event = {
                    'summary': title,
                    'start': {'date': date.strftime('%Y-%m-%d')},
                    'end': {'date': (date + datetime.timedelta(days=1)).strftime('%Y-%m-%d')},
                }
                service.events().insert(calendarId='primary', body=event).execute()

        # --- Vider agenda.md ---
        def clear_agenda(file_path='1.Agenda.md'):
            open(file_path, 'w').close()

        # --- Main ---
        events = parse_agenda()
        if events:
            add_events(events)
            clear_agenda()
            print(f"{len(events)} événements ajoutés et agenda.md vidé.")
        else:
            print("Aucun événement trouvé.")
        EOF
